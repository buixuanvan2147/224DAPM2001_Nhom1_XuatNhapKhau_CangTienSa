@model Website_CangTienSa.Models.nhanVien
@{
    ViewBag.Title = "Tạo Tài Khoản Quản Trị Viên";
    Layout = "~/Views/Shared/_LayoutQuanTriVien.cshtml";
}
<style>
    .table-responsive {
        overflow-x: auto;
        border-radius: 8px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
        margin-bottom: 70px;
        background-color: #ffffff;
        padding: 30px; /* Thêm padding cho nội dung bên trong khung */
    }

    .create-account {
        text-align: center;
        margin-bottom: 20px; /* Thêm khoảng cách dưới tiêu đề */
        color: #343a40; /* Màu chữ tiêu đề */
    }

    .form-container {
        display: flex;
        gap: 30px;
        margin-top: 20px;
        flex-wrap: wrap;
    }

    .left-section {
        flex: 1;
        max-width: 300px;
        height: 400px; /* Chiều cao cố định cho left-section */
        text-align: center;
        padding: 20px;
        border: 1px solid #ddd; /* Thêm border cho khung bên trái */
        border-radius: 8px; /* Bo tròn góc khung */
        background-color: #2a2d3e; /* Màu nền nhạt cho khung */
        display: flex;
        flex-direction: column; /* Sắp xếp các phần tử theo chiều dọc */
        justify-content: space-between; /* Đẩy nút xuống dưới cùng */
    }

    .profile-picture-preview {
        margin-top: 10px;
        border: 1px solid #eee; /* Khung cố định cho preview */
        border-radius: 5px;
        overflow: hidden; /* Đảm bảo ảnh không tràn ra ngoài khung */
        height: 250px; /* Chiều cao cố định cho khung preview */
        display: flex;
        align-items: center; /* Căn giữa ảnh theo chiều dọc */
        justify-content: center; /* Căn giữa ảnh theo chiều ngang */
        background-color: #ffffff;
    }

        .profile-picture-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain; /* Đảm bảo toàn bộ ảnh hiển thị trong khung */
            display: block; /* Tránh ảnh bị thừa margin dưới do inline */
        }

    .custom-button {
        background-color: #3471eb;
        color: #ffffff;
        padding: 8px 16px; /* Tăng padding cho nút */
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px; /* Tăng kích thước chữ nút */
        display: inline-block;
        width: 100%; /* Nút chiếm toàn bộ chiều rộng */
    }

        .custom-button:hover {
            background-color: #0056b3;
        }

    #imagePath {
        display: block;
        margin-top: 10px;
        font-size: 14px;
        color: #555;
        text-align: center; /* Căn giữa tên file */
    }

    .right-section {
        flex: 2;
        min-width: 300px;
    }

    .form-group {
        margin-bottom: 15px; /* Tăng khoảng cách giữa các trường form */
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold; /* In đậm label */
            color: #333;
        }

        .form-group input[type="text"],
        .form-group input[type="password"],
        .form-group input[type="email"],
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            box-sizing: border-box;
        }

        .form-group .error-message {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
        }

    .btnTaoTaiKhoan {
        background-color: #28a745; /* Màu xanh lá cây tươi sáng hơn */
        border: 1px solid #28a745;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        display: block;
        width: 100%;
        margin-top: 20px; /* Thêm khoảng cách trên nút */
    }

        .btnTaoTaiKhoan:hover {
            background-color: #1e7e34;
        }

    .form-actions {
        text-align: center;
        margin-top: 20px;
    }

    .backtoQLTK {
        color: #007bff;
        text-decoration: underline;
        font-size: 16px;
    }

        .backtoQLTK a {
            color: inherit;
            text-decoration: inherit;
        }

            .backtoQLTK a:hover {
                color: #0056b3;
            }
</style>
<div class="table-responsive">
    <h2 class="create-account">Tạo Tài Khoản Nhân Viên</h2>
    <div class="form-container">
        <div class="left-section">
            <div class="form-group image-upload-group" style="margin-bottom: 0;">

                @Html.LabelFor(model => model.anhDaiDienNhanVienUrl, "Ảnh Đại Diện", new { style = "color: white;" })


                <div class="profile-picture-preview">
                    <img id="newImage" src="" alt="Ảnh Mới" style="display:none;" />
                </div>

                <span id="imagePath" style="margin-bottom: 10px; color:#ffffff;">Chưa chọn ảnh</span>
            </div>
            <label for="fileUpload" class="custom-button">Chọn ảnh đại diện</label>
            <input type="file" id="fileUpload" name="imageFile" class="form-control" onchange="previewImage(); updateFileName()" hidden />
        </div>

        <div class="right-section">
            @* Các trường còn lại *@
            <div class="form-group">
                @Html.LabelFor(model => model.maLoaiNhanVien, "Vai Trò")
                @Html.DropDownListFor(model => model.maLoaiNhanVien, (SelectList)ViewBag.vaiTroNhanVienList, "Chọn vai trò", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.maLoaiNhanVien, "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.tenDangNhap, "Tên Đăng Nhập")
                @Html.TextBoxFor(model => model.tenDangNhap, new { @class = "form-control", placeholder = "Nhập tên đăng nhập" })
                @Html.ValidationMessageFor(model => model.tenDangNhap, "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.matKhau, "Mật Khẩu")
                @Html.PasswordFor(model => model.matKhau, new { @class = "form-control", placeholder = "Nhập mật khẩu" })
                @Html.ValidationMessageFor(model => model.matKhau, "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.tenHienThi, "Tên Hiển Thị")
                @Html.TextBoxFor(model => model.tenHienThi, new { @class = "form-control", placeholder = "Nhập tên hiển thị" })
                @Html.ValidationMessageFor(model => model.tenHienThi, "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.sdtNhanVien, "Số Điện Thoại")
                @Html.TextBoxFor(model => model.sdtNhanVien, new { @class = "form-control", placeholder = "Nhập số điện thoại" })
                @Html.ValidationMessageFor(model => model.sdtNhanVien, "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.diaChi, "Địa Chỉ")
                @Html.TextBoxFor(model => model.diaChi, new { @class = "form-control", placeholder = "Nhập địa chỉ" })
                @Html.ValidationMessageFor(model => model.diaChi, "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.email, "Email")
                @Html.TextBoxFor(model => model.email, new { @class = "form-control", type = "email", placeholder = "Nhập địa chỉ email" })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.trangThaiTaiKhoanNhanVien, "Trạng Thái Tài Khoản Sau Khi Tạo")
                @Html.DropDownListFor(model => model.trangThaiTaiKhoanNhanVien, new List<SelectListItem>
                {
                    new SelectListItem { Text = "Mở sẵn", Value = "Đang hoạt động" },
                    new SelectListItem { Text = "Khóa", Value = "Đang bị khóa" }
                }, "Chọn trạng thái", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.trangThaiTaiKhoanNhanVien, "", new { @class = "error-message" })
            </div>
            @using (Html.BeginForm("TaoTaiKhoanNhanVien_QuanTriVien", "QuanTriVien", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "error-message" })
                @Html.HiddenFor(model => model.anhDaiDienNhanVienUrl)
                <div class="form-group">
                    <button type="submit" class="btnTaoTaiKhoan btn btn-primary btn-block">Tạo Tài Khoản</button>
                </div>
            }

            <div class="form-actions">
                <p class="backtoQLTK"><a href="@Url.Action("QuanLyTaiKhoan_QuanTriVien", "QuanTriVien")">Quay Lại</a></p>
            </div>
        </div>
    </div>
</div>

<script>
    // Hàm preview ảnh
    function previewImage() {
        var file = document.getElementById("fileUpload").files[0];
        var reader = new FileReader();
        var imagePath = document.getElementById("imagePath");
        var newImage = document.getElementById("newImage");
        var previewContainer = document.querySelector('.profile-picture-preview');
        var hiddenInput = document.querySelector('input[name="anhDaiDienNhanVienUrl"]');

        var allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/jpg'];
        if (file && allowedTypes.includes(file.type)) {
            reader.onloadend = function () {
                imagePath.innerText = file.name;
                newImage.src = reader.result;
                newImage.style.display = "block";
                previewContainer.style.display = "block";
                hiddenInput.value = 'temp_' + file.name; // Gán một giá trị tạm thời
            };
            reader.readAsDataURL(file);
        } else {
            alert("Vui lòng chọn tệp ảnh có định dạng hợp lệ (jpg, jpeg, png, gif).");
            newImage.style.display = "none";
            previewContainer.style.display = "none";
            imagePath.innerText = "Chưa chọn ảnh";
            hiddenInput.value = ''; // Xóa giá trị tạm thời
        }
    }

    // Cập nhật tên file khi chọn ảnh
    function updateFileName() {
        var input = document.getElementById("fileUpload");
        var imagePath = document.getElementById("imagePath");
        if (input.files.length > 0) {
            imagePath.innerText = input.files[0].name;
        } else {
            imagePath.innerText = "Chưa chọn ảnh";
        }
    }

    // Xác nhận trước khi submit form
    document.querySelector("form").addEventListener("submit", function (event) {
        var userConfirmed = confirm("Xác nhận thêm mới nhân viên?");
        if (!userConfirmed) {
            event.preventDefault();
        }
        // Logic xử lý upload ảnh thực tế nên được thực hiện ở phía server
        // Giá trị tạm thời trong hidden input chỉ để đánh dấu có ảnh được chọn
    });
</script>