@{
    ViewBag.Title = "Quản Lý Tài Khoản";
    Layout = "~/Views/Shared/_LayoutQuanTriVien.cshtml";
}

<style>
    /* Màu chủ đạo: #141d26 */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #333;
        background-color: #ffffff;
    }

    .filter-status {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 0;
        margin-bottom: 20px;
    }

        .filter-status h2 {
            margin: 0;
            font-size: 28px;
            font-weight: bold;
            color: #141d26;
            letter-spacing: 0.5px;
        }

    .filter-controls {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .filter-control {
        display: flex;
        align-items: center;
        gap: 15px;
    }

        .filter-control label {
            font-size: 16px;
            color: #555;
            font-weight: 500;
        }

        .filter-control select {
            padding: 10px 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 15px;
            background-color: #fff;
            color: #333;
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
            transition: border-color 0.3s ease;
            outline: none;
        }

            .filter-control select:focus {
                border-color: #141d26;
                box-shadow: 0 0 6px rgba(20, 29, 38, 0.2);
            }

    .table-responsive {
        overflow-x: auto;
        border-radius: 8px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
        margin-bottom: 30px;
        background-color: #ffffff;
        padding: 30px;
    }

    .table-khach-hang {
        border-collapse: collapse;
        width: 100%;
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #e0e0e0;
    }

        .table-khach-hang th,
        .table-khach-hang td {
            border: 1px solid #e0e0e0;
            padding: 12px 15px;
            text-align: left;
            white-space: nowrap;
            font-size: 14px;
            color: #444;
        }

        .table-khach-hang th {
            background-color: #141d26;
            color: #fff;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .table-khach-hang tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .table-khach-hang tbody tr:hover {
            background-color: #f0f0f0;
            transition: background-color 0.3s ease;
        }

        /* CSS cho các nút hành động */
        .table-khach-hang .action-buttons {
            display: flex;
            flex-wrap: nowrap;
            gap: 8px;
            justify-content: flex-start;
            align-items: stretch;
        }

        .table-khach-hang .action-button {
            flex-grow: 1;
            flex-basis: 0;
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out, background-color 0.3s ease;
            outline: none;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
            text-align: center;
            white-space: nowrap;
        }

    .action-button:hover{
        text-decoration:underline;
    }

    .table-khach-hang .delete-btn {
        background-color: #dc3545;
        color: #fff;
    }

            .table-khach-hang .delete-btn:hover {
                background-color: #c82333;
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

        .table-khach-hang .lock-account {
            background-color: #6c757d;
            color: #fff;
        }

            .table-khach-hang .lock-account:hover {
                background-color: #5a6268;
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

        .table-khach-hang .unlock-account {
            background-color: #007bff;
            color: #fff;
        }

            .table-khach-hang .unlock-account:hover {
                background-color: #0056b3;
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

        .table-khach-hang .approve-account {
            background-color: #28a745;
            color: #fff;
        }

            .table-khach-hang .approve-account:hover {
                background-color: #218838;
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

        .table-khach-hang .reject-account {
            background-color: #ffc107;
            color: #333;
        }

            .table-khach-hang .reject-account:hover {
                background-color: #e0a800;
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
        .table-khach-hang .edit-khachHang-btn:hover {
            background-color: #5a6268;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .table-khach-hang .role-account {
            background-color: #17a2b8;
            color: #fff;
        }

            .table-khach-hang .role-account:hover {
                background-color: #138496;
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                text-decoration: none;
            }

        .table-khach-hang img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            border: 1px solid #ddd;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s ease-in-out;
        }

            .table-khach-hang img:hover {
                transform: scale(1.02);
            }

    .button-add-TK {
        display: inline-block;
        padding: 10px 18px;
        background-color: #5cb85c;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease-in-out;
        font-size: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .button-add-TK:hover {
            background-color: #4cae4c;
            color: #ffffff;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.15);
            transform: translateY(-1px);
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .filter-status {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .table-responsive {
            padding: 15px;
        }

        .table-khach-hang th,
        .table-khach-hang td {
            font-size: 13px;
            padding: 10px;
        }

        .action-buttons {
            flex-direction: column;
            gap: 5px;
        }

        .table-khach-hang .action-button {
            flex-basis: auto;
            width: 100%;
        }
    }
</style>

<div class="table-responsive">
    <div class="filter-status">
        <h2>Danh Sách Khách Hàng</h2>
        <div class="filter-controls">
            <div class="filter-control">
                <label for="status-filter-khach-hang">Lọc trạng thái:</label>
                <select id="status-filter-khach-hang">
                    <option value="">Tất cả tài khoản</option>
                    <option value="Chờ duyệt">Tài khoản chờ duyệt</option>
                    <option value="Đang bị khóa">Tài khoản đang khóa</option>
                    <option value="Đã duyệt">Tài khoản đã duyệt</option>
                    <option value="Đã từ chối">Tài khoản đã từ chối</option>
                </select>
            </div>
            <button id="bulkApproveButton"
                    class="button-add-TK"
                    style="border: none; background-color: #5cb85c; padding: 10px 18px; color: white; border-radius: 5px; font-size: 15px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease-in-out, text-decoration 0.3s ease;"
                    onmouseover="this.style.backgroundColor='#4cae4c'; this.style.boxShadow='0 3px 5px rgba(0, 0, 0, 0.15)'; this.style.transform='translateY(-1px)'; this.style.textDecoration='underline';"
                    onmouseout="this.style.backgroundColor='#5cb85c'; this.style.boxShadow='0 2px 4px rgba(0, 0, 0, 0.1)'; this.style.transform='translateY(0)'; this.style.textDecoration='none';">
                Duyệt Hàng Loạt
            </button>
            <a href="@Url.Action("TaoTaiKhoanKhachHang_QuanTriVien", "QuanTriVien_QLTaiKhoan")" class="button-add-TK">Tạo Tài Khoản Khách Hàng</a>
        </div>
    </div>
    <table class="table-khach-hang" id="table-khach-hang">
        <thead>
            <tr>
                <th>STT</th>
                <th>Ảnh Đại Diện</th>
                <th>Mã Khách Hàng</th>
                <th>Tên Khách Hàng</th>
                <th>Tên Đăng Nhập</th>
                <th>Mật Khẩu</th>
                <th>Tên Công Ty</th>
                <th>Mã Số Thuế</th>
                <th>Ngày Đăng Ký</th>
                <th>CCCD</th>
                <th>Địa Chỉ Liên Lạc</th>
                <th>SĐT Khách Hàng</th>
                <th>Email</th>
                <th>Trạng Thái Tài Khoản</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @if (ViewBag.KhachHangs != null && ViewBag.KhachHangs.Count > 0)
            {
                int sttKhachHang = 1;
                foreach (var khachHang in ViewBag.KhachHangs)
                {
                    <tr>
                        <td>@sttKhachHang</td>
                        <td>
                            <img src="~/Content/img/KhachHangUrl/@(string.IsNullOrEmpty(khachHang.anhDaiDienKhachHangUrl) ? "default_user_image.png" : khachHang.anhDaiDienKhachHangUrl)"
                                 alt="Ảnh đại diện">
                        </td>
                        <td>@khachHang.maKhachHang</td>
                        <td>@khachHang.tenKhachHang</td>
                        <td>@khachHang.tenDangNhap</td>
                        <td>@khachHang.matKhau</td>
                        <td>@khachHang.tenCongTy</td>
                        <td>@khachHang.maSoThueCongTy</td>
                        <td>@khachHang.ngayDangKy.ToString("dd/MM/yyyy")</td>
                        <td>@khachHang.cccd</td>
                        <td>@khachHang.diaChiLienLac</td>
                        <td>@khachHang.sdtKhachHang</td>
                        <td>@khachHang.email</td>
                        <td class="status-cell">@khachHang.trangThaiTaiKhoanKhachHang</td>
                        <td>
                            <div class="action-buttons">
                                @if (khachHang.trangThaiTaiKhoanKhachHang == "Chờ duyệt")
                                {
                                    <button class="action-button approve-account" data-id="@khachHang.maKhachHang" data-action="approve">Duyệt</button>
                                    <button class="action-button reject-account" data-id="@khachHang.maKhachHang" data-action="reject">Từ Chối</button>
                                }
                                else if (khachHang.trangThaiTaiKhoanKhachHang == "Đã duyệt")
                                {
                                    <button class="action-button lock-account" data-id="@khachHang.maKhachHang" data-action="lock">Khóa</button>
                                }
                                else if (khachHang.trangThaiTaiKhoanKhachHang == "Đã từ chối")
                                {
                                    <button class="action-button approve-account" data-id="@khachHang.maKhachHang" data-action="approve">Duyệt</button>
                                    <button class="action-button delete-btn" data-id="@khachHang.maKhachHang" data-action="delete">Xóa</button>
                                }
                                else if (khachHang.trangThaiTaiKhoanKhachHang == "Đang bị khóa")
                                {
                                    <button class="action-button unlock-account" data-id="@khachHang.maKhachHang" data-action="unlock">Mở Khóa</button>
                                    <button class="action-button delete-btn" data-id="@khachHang.maKhachHang" data-action="delete">Xóa</button>
                                }
                                @*<button style="background-color: #FF1493; color: #ffffff;" class="action-button edit-khachHang-btn" data-id="@khachHang.maKhachHang" data-action="edit-khachHang">Sửa</button>*@
                            </div>
                        </td>
                    </tr>
                    sttKhachHang++;
                }
            }
            else
            {
                <tr>
                    <td colspan="14" style="text-align: center;">
                        Không có dữ liệu khách hàng.
                        <a href="@Url.Action("TaoTaiKhoanKhachHang_QuanTriVien", "QuanTriVien_QLTaiKhoan")">Tạo mới</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Modal phân quyền -->
<div id="roleAssignmentModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1000; justify-content: center; align-items: center;">
    <div style="background: white; padding: 20px; border-radius: 8px; width: 400px; max-width: 90%; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
        <h3 style="margin-top: 0; color: #141d26;">Phân Quyền Nhân Viên</h3>
        <p>Chọn vai trò cho nhân viên <span id="modalNhanVienId"></span>:</p>
        <select id="roleSelect" style="width: 100%; padding: 8px; margin-bottom: 20px; border: 1px solid #ccc; border-radius: 4px;">
            <option value="">Chọn vai trò</option>
            @foreach (var role in ViewBag.Roles)
            {
                <option value="@role">@role</option>
            }
        </select>
        <div style="display: flex; gap: 10px; justify-content: flex-end;">
            <button id="confirmRoleAssignment" class="action-button approve-account">Xác Nhận</button>
            <button id="cancelRoleAssignment" class="action-button delete-btn">Hủy</button>
        </div>
    </div>
</div>
<div class="table-responsive" style="margin-bottom:70px;">
    <div class="filter-status">
        <h2>Danh Sách Nhân Viên</h2>
        <div class="filter-controls">
            <div class="filter-control">
                <label for="status-filter-nhan-vien">Lọc vai trò:</label>
                <select id="status-filter-nhan-vien">
                    <option value="">Tất cả nhân viên</option>
                    @foreach (var role in ViewBag.Roles)
                    {
                        <option value="@role">@role</option>
                    }
                </select>
            </div>
            <a href="@Url.Action("TaoTaiKhoanNhanVien_QuanTriVien", "QuanTriVien_QLTaiKhoan")" class="button-add-TK">Tạo Tài Khoản Nhân Viên</a>
        </div>
    </div>
    <table class="table-khach-hang" id="table-nhan-vien">
        <thead>
            <tr>
                <th>STT</th>
                <th>Ảnh Đại Diện</th>
                <th>Mã Nhân Viên</th>
                <th>Vai Trò</th>
                <th>Tên Hiển Thị</th>
                <th>Tên Đăng Nhập</th>
                <th>SĐT</th>
                <th>Email</th>
                <th>Địa Chỉ</th>
                <th>Dăng Nhập Lần Cuối</th>
                <th>Trạng Thái Tài Khoản</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @if (ViewBag.NhanViens != null)
            {
                int sttNhanVien = 1;
                foreach (var nhanVien in ViewBag.NhanViens)
                {
                    <tr>
                        <td>@sttNhanVien</td>
                        <td>
                            <img src="~/Content/img/NhanVienUrl/@(string.IsNullOrEmpty(nhanVien.AnhDaiDienNhanVienUrl) ? "default_user_image.png" : nhanVien.AnhDaiDienNhanVienUrl)" alt="Ảnh đại diện" />
                        </td>
                        <td>@nhanVien.MaNhanVien</td>
                        <td>@nhanVien.TenLoaiNhanVien</td>
                        <td>@nhanVien.TenHienThi</td>
                        <td>@nhanVien.TenDangNhap</td>
                        <td>@nhanVien.SdtNhanVien</td>
                        <td>@nhanVien.Email</td>
                        <td>@nhanVien.DiaChi</td>
                        <td>@nhanVien.ThoiGianDangNhapGanNhat</td>
                        <td class="status-cell-nhan-vien">@nhanVien.TrangThaiTaiKhoanNhanVien</td>
                        <td>
                            <div class="action-buttons" data-nhanvien-id="@nhanVien.MaNhanVien" data-nhanvien-status="@nhanVien.TrangThaiTaiKhoanNhanVien">
                                @* Các nút sẽ được render bởi JavaScript dựa trên trạng thái của nhân viên *@
                            </div>
                        </td>
                    </tr>
                    sttNhanVien++;
                }
            }
            else
            {
                <tr>
                    <td colspan="13" style="text-align: center;">
                        Không có dữ liệu nhân viên.
                        <a href="@Url.Action("TaoTaiKhoanNhanVien_QuanTriVien", "QuanTriVien_QLTaiKhoan")">Tạo mới</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- Khai báo biến và phần tử DOM chung ---
            // Đối với bảng Khách Hàng
            const statusFilterKhachHang = document.getElementById('status-filter-khach-hang');
            const tableKhachHang = document.getElementById('table-khach-hang');
            let tableKhachHangBody;
            let tableKhachHangRows = [];

            if (tableKhachHang) {
                tableKhachHangBody = tableKhachHang.querySelector('tbody');
                tableKhachHangRows = Array.from(tableKhachHangBody.querySelectorAll('tr'));
            }

            // Đối với bảng Nhân Viên
            const statusFilterNhanVien = document.getElementById('status-filter-nhan-vien');
            const tableNhanVien = document.getElementById('table-nhan-vien');
            let tableNhanVienBody;
            let tableNhanVienRows = [];

            if (tableNhanVien) {
                tableNhanVienBody = tableNhanVien.querySelector('tbody');
                tableNhanVienRows = Array.from(tableNhanVienBody.querySelectorAll('tr'));
            }

            // --- Modal phân quyền ---
            const roleAssignmentModal = document.getElementById('roleAssignmentModal');
            const roleSelect = document.getElementById('roleSelect');
            const confirmRoleAssignment = document.getElementById('confirmRoleAssignment');
            const cancelRoleAssignment = document.getElementById('cancelRoleAssignment');
            const modalNhanVienId = document.getElementById('modalNhanVienId');
            let currentNhanVienId = null;

            // Ánh xạ tenLoaiNhanVien với maVaiTroNhanVien từ ViewBag.RoleMapping
            const roleMapping = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.RoleMapping ?? new Dictionary<string, string>()));

            // --- Hàm chung để cập nhật STT và xử lý hàng trống ---
            function updateSerialNumbers(tableBody, rows, colspanValue) {
                const visibleRows = rows.filter(row => row.style.display !== 'none');
                const emptyRow = tableBody.querySelector(`tr td[colspan="${colspanValue}"]`);

                if (visibleRows.length === 0) {
                    if (emptyRow) {
                        emptyRow.closest('tr').style.display = '';
                    }
                } else {
                    if (emptyRow) {
                        emptyRow.closest('tr').style.display = 'none';
                    }
                    visibleRows.forEach((row, index) => {
                        const firstCell = row.querySelector('td:first-child');
                        if (firstCell) {
                            firstCell.textContent = index + 1;
                        }
                    });
                }
            }

            // --- Lọc và cập nhật STT cho bảng Khách Hàng ---
            function updateSerialNumbersKhachHang() {
                if (tableKhachHangBody) {
                    tableKhachHangRows = Array.from(tableKhachHangBody.querySelectorAll('tr'));
                }
                updateSerialNumbers(tableKhachHangBody, tableKhachHangRows, 14);
            }

            if (statusFilterKhachHang) {
                statusFilterKhachHang.addEventListener('change', function () {
                    const selectedStatus = this.value;
                    tableKhachHangRows.forEach(row => {
                        const statusCell = row.querySelector('.status-cell');
                        if (statusCell) {
                            if (selectedStatus === '' || statusCell.textContent.trim() === selectedStatus) {
                                row.style.display = '';
                            } else {
                                row.style.display = 'none';
                            }
                        }
                    });
                    updateSerialNumbersKhachHang();
                });
            }

            // --- Lọc và cập nhật STT cho bảng Nhân Viên ---
            function updateSerialNumbersNhanVien() {
                if (tableNhanVienBody) {
                    tableNhanVienRows = Array.from(tableNhanVienBody.querySelectorAll('tr'));
                }
                updateSerialNumbers(tableNhanVienBody, tableNhanVienRows, 13);
            }

            if (statusFilterNhanVien) {
                statusFilterNhanVien.addEventListener('change', function () {
                    const selectedRole = this.value;
                    tableNhanVienRows.forEach(row => {
                        const roleCell = row.querySelector('td:nth-child(4)');
                        if (roleCell) {
                            if (selectedRole === '' || roleCell.textContent.trim() === selectedRole) {
                                row.style.display = '';
                            } else {
                                row.style.display = 'none';
                            }
                        }
                    });
                    updateSerialNumbersNhanVien();
                });
            }

            // --- Xử lý duyệt hàng loạt ---
            document.getElementById('bulkApproveButton').addEventListener('click', function () {
                if (confirm('Bạn có chắc chắn muốn duyệt tất cả các tài khoản đang chờ duyệt?')) {
                    $.ajax({
                        url: '@Url.Action("DuyetKhachHangHangLoat_QuanTriVien", "QuanTriVien_QLTaiKhoan")',
                        type: 'POST',
                        success: function (response) {
                            alert(response.message);
                            if (response.success) {
                                location.reload();
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('Đã xảy ra lỗi khi duyệt hàng loạt: ' + error);
                            console.error('AJAX Error:', status, error, xhr.responseText);
                        }
                    });
                }
            });

            // --- Xử lý hành động tài khoản Khách Hàng ---
            function sendCustomerAction(id, actionType, button) {
                let url = '';
                let confirmMessage = '';
                let newStatus = '';

                switch (actionType) {
                    case 'approve':
                        url = '@Url.Action("ApproveCustomerAccount", "QuanTriVien_QLTaiKhoan")';
                        confirmMessage = `Xác nhận duyệt tài khoản khách hàng ID: ${id}?`;
                        newStatus = 'Đã duyệt';
                        break;
                    case 'reject':
                        url = '@Url.Action("RejectCustomerAccount", "QuanTriVien_QLTaiKhoan")';
                        confirmMessage = `Xác nhận từ chối tài khoản khách hàng ID: ${id}?`;
                        newStatus = 'Đã từ chối';
                        break;
                    case 'lock':
                        url = '@Url.Action("LockCustomerAccount", "QuanTriVien_QLTaiKhoan")';
                        confirmMessage = `Xác nhận khóa tài khoản khách hàng ID: ${id}?`;
                        newStatus = 'Đang bị khóa';
                        break;
                    case 'unlock':
                        url = '@Url.Action("UnlockCustomerAccount", "QuanTriVien_QLTaiKhoan")';
                        confirmMessage = `Xác nhận mở khóa tài khoản khách hàng ID: ${id}?`;
                        newStatus = 'Đã duyệt';
                        break;
                    case 'delete':
                        url = '@Url.Action("DeleteCustomerAccount", "QuanTriVien_QLTaiKhoan")';
                        confirmMessage = `Xác nhận xóa tài khoản khách hàng ID: ${id}? Thao tác này không thể hoàn tác.`;
                        break;
                    default:
                        console.warn('Hành động không xác định cho khách hàng:', actionType);
                        return;
                }

                if (confirm(confirmMessage)) {
                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: { id: id },
                        success: function (response) {
                            if (response.success) {
                                alert(response.message);
                                const row = button.closest('tr');
                                if (row) {
                                    if (actionType === 'delete') {
                                        row.remove();
                                        updateSerialNumbersKhachHang();
                                    } else {
                                        const statusCell = row.querySelector('.status-cell');
                                        if (statusCell && newStatus) {
                                            statusCell.textContent = newStatus;
                                        }
                                        const actionButtonsContainer = row.querySelector('.action-buttons');
                                        if (actionButtonsContainer) {
                                            actionButtonsContainer.innerHTML = getCustomerActionButtonsHtml(newStatus, id);
                                            attachCustomerAccountButtonListeners();
                                        }
                                    }
                                }
                            } else {
                                alert('Lỗi: ' + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('Đã xảy ra lỗi khi thực hiện hành động: ' + error);
                            console.error('AJAX Error:', status, error, xhr.responseText);
                        }
                    });
                }
            }

            // Hàm trợ giúp để tạo HTML cho các nút hành động của khách hàng dựa trên trạng thái
            function getCustomerActionButtonsHtml(status, id) {
                let html = '';
                if (status === "Chờ duyệt") {
                    html = `<button class="action-button approve-account" data-id="${id}" data-action="approve">Duyệt</button>
                            <button class="action-button reject-account" data-id="${id}" data-action="reject">Từ Chối</button>`;
                } else if (status === "Đã duyệt") {
                    html = `<button class="action-button lock-account" data-id="${id}" data-action="lock">Khóa</button>`;
                } else if (status === "Đã từ chối") {
                    html = `<button class="action-button approve-account" data-id="${id}" data-action="approve">Duyệt</button>
                            <button class="action-button delete-btn" data-id="${id}" data-action="delete">Xóa</button>`;
                } else if (status === "Đang bị khóa") {
                    html = `<button class="action-button unlock-account" data-id="${id}" data-action="unlock">Mở Khóa</button>
                            <button class="action-button delete-btn" data-id="${id}" data-action="delete">Xóa</button>`;
                }
                return html;
            }

            // Gắn các trình lắng nghe sự kiện cho các nút hành động của tài khoản khách hàng
            function attachCustomerAccountButtonListeners() {
                document.querySelectorAll('#table-khach-hang .action-buttons button[data-action]').forEach(button => {
                    button.removeEventListener('click', customerAccountButtonHandler);
                    button.addEventListener('click', customerAccountButtonHandler);
                });
            }

            // Hàm xử lý sự kiện click cho các nút hành động của khách hàng
            function customerAccountButtonHandler() {
                const id = this.getAttribute('data-id');
                const action = this.getAttribute('data-action');
                sendCustomerAction(id, action, this);
            }

            // Gắn trình lắng nghe sự kiện ban đầu cho các nút hành động của tài khoản khách hàng
            attachCustomerAccountButtonListeners();

            // --- Xử lý hành động tài khoản Nhân Viên ---
            function sendNhanVienAction(id, actionType, button) {
                let url = '';
                let confirmMessage = '';
                let newStatus = '';

                switch (actionType) {
                    case 'edit':
                        window.location.href = `@Url.Action("ChinhSuaNhanVien_QuanTriVien", "QuanTriVien_QLTaiKhoan")?id=${id}`;
                        return;
                    case 'delete':
                        url = '@Url.Action("DeleteNhanVienAccount", "QuanTriVien_QLTaiKhoan")';
                        confirmMessage = `Xác nhận xóa tài khoản nhân viên ID: ${id}? Thao tác này không thể hoàn tác.`;
                        break;
                    case 'lock':
                        url = '@Url.Action("LockNhanVienAccount", "QuanTriVien_QLTaiKhoan")';
                        confirmMessage = `Xác nhận khóa tài khoản nhân viên ID: ${id}?`;
                        newStatus = 'Đang bị khóa';
                        break;
                    case 'unlock':
                        url = '@Url.Action("UnlockNhanVienAccount", "QuanTriVien_QLTaiKhoan")';
                        confirmMessage = `Xác nhận mở khóa tài khoản nhân viên ID: ${id}?`;
                        newStatus = 'Đang hoạt động';
                        break;
                    default:
                        console.warn('Hành động không xác định cho nhân viên:', actionType);
                        return;
                }

                if (confirm(confirmMessage)) {
                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: { id: id },
                        success: function (response) {
                            if (response.success) {
                                alert(response.message);
                                const row = button.closest('tr');
                                if (row) {
                                    if (actionType === 'delete') {
                                        row.remove();
                                        updateSerialNumbersNhanVien();
                                    } else {
                                        const statusCell = row.querySelector('.status-cell-nhan-vien');
                                        if (statusCell && newStatus) {
                                            statusCell.textContent = newStatus;
                                        }
                                        const actionButtonsContainer = row.querySelector('.action-buttons');
                                        if (actionButtonsContainer) {
                                            actionButtonsContainer.dataset.nhanvienStatus = newStatus || statusCell.textContent.trim();
                                            actionButtonsContainer.innerHTML = getNhanVienActionButtonsHtml(newStatus || statusCell.textContent.trim(), id);
                                            attachNhanVienAccountButtonListeners();
                                        }
                                    }
                                }
                            } else {
                                alert('Lỗi: ' + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('Đã xảy ra lỗi khi thực hiện hành động: ' + error);
                            console.error('AJAX Error:', status, error, xhr.responseText);
                        }
                    });
                }
            }

            // Hàm trợ giúp để tạo HTML cho các nút hành động của nhân viên dựa trên trạng thái
            function getNhanVienActionButtonsHtml(status, id) {
                let html = '';
                html += `<a href="@Url.Action("ChinhSuaNhanVien_QuanTriVien", "QuanTriVien_QLTaiKhoan")?id=${id}"
                         class="action-button edit-btn"
                         data-action="edit"
                         style="background-color: #3498db; color: white; padding: 5px 10px; border-radius: 4px; text-decoration: none;"
                         onmouseover="this.style.backgroundColor='#2c80b4'"
                         onmouseout="this.style.backgroundColor='#3498db'">
                         Sửa
                         </a>`;

                html += `<button class="action-button delete-btn" data-id="${id}" data-action="delete"
                         style="background-color: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 4px;"
                         onmouseover="this.style.backgroundColor='#c0392b'"
                         onmouseout="this.style.backgroundColor='#e74c3c'">
                         Xóa
                         </button>`;

                if (status === "Đang hoạt động") {
                    html += `<button class="action-button lock-account" data-id="${id}" data-action="lock">Khóa</button>`;
                } else if (status === "Đang bị khóa") {
                    html += `<button class="action-button unlock-account" data-id="${id}" data-action="unlock">Mở Khóa</button>`;
                }

                html += `<button class="action-button role-account" data-id="${id}" data-action="role">Phân Quyền</button>`;
                return html;
            }

            // Gắn các trình lắng nghe sự kiện cho các nút hành động của tài khoản nhân viên
            function attachNhanVienAccountButtonListeners() {
                document.querySelectorAll('#table-nhan-vien .action-buttons button[data-action], #table-nhan-vien .action-buttons a[data-action]').forEach(element => {
                    element.removeEventListener('click', nhanVienAccountButtonHandler);
                    element.addEventListener('click', nhanVienAccountButtonHandler);
                });
            }

            // Hàm xử lý sự kiện click cho các nút hành động của nhân viên
            function nhanVienAccountButtonHandler(event) {
                if (this.tagName === 'BUTTON' || (this.tagName === 'A' && this.getAttribute('data-action') !== 'edit')) {
                    event.preventDefault();
                }

                const id = this.getAttribute('data-id');
                const action = this.getAttribute('data-action');

                if (action === 'role') {
                    // Hiển thị modal phân quyền
                    currentNhanVienId = id;
                    modalNhanVienId.textContent = id;
                    roleSelect.value = '';
                    roleAssignmentModal.style.display = 'flex';
                } else {
                    sendNhanVienAction(id, action, this);
                }
            }

            // Xử lý xác nhận phân quyền
            confirmRoleAssignment.addEventListener('click', function () {
                const selectedRoleName = roleSelect.value;
                if (!selectedRoleName) {
                    alert('Vui lòng chọn một vai trò!');
                    return;
                }

                const selectedRoleId = roleMapping[selectedRoleName];
                if (!selectedRoleId) {
                    alert('Vai trò không hợp lệ!');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("PhanQuyenNhanVien_QuanTriVien", "QuanTriVien_QLTaiKhoan")',
                    type: 'POST',
                    data: { id: currentNhanVienId, maVaiTroNhanVien: selectedRoleId },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            // Cập nhật cột Vai Trò trong bảng
                            tableNhanVienRows.forEach(row => {
                                const idCell = row.querySelector('td:nth-child(3)'); // Cột Mã Nhân Viên
                                if (idCell && idCell.textContent === currentNhanVienId) {
                                    const roleCell = row.querySelector('td:nth-child(4)'); // Cột Vai Trò
                                    if (roleCell) {
                                        roleCell.textContent = selectedRoleName;
                                    }
                                }
                            });
                            // Đóng modal
                            roleAssignmentModal.style.display = 'none';
                        } else {
                            alert('Lỗi: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('Đã xảy ra lỗi khi phân quyền: ' + error);
                        console.error('AJAX Error:', status, error, xhr.responseText);
                    }
                });
            });

            // Xử lý hủy phân quyền
            cancelRoleAssignment.addEventListener('click', function () {
                roleAssignmentModal.style.display = 'none';
                currentNhanVienId = null;
            });

            // --- Khởi tạo khi DOM được tải ---
            if (tableKhachHang && tableKhachHangBody) {
                updateSerialNumbersKhachHang();
                attachCustomerAccountButtonListeners();
            }

            if (tableNhanVien && tableNhanVienBody) {
                updateSerialNumbersNhanVien();
                document.querySelectorAll('#table-nhan-vien .action-buttons').forEach(container => {
                    const id = container.dataset.nhanvienId;
                    const status = container.dataset.nhanvienStatus;
                    if (id && status) {
                        container.innerHTML = getNhanVienActionButtonsHtml(status, id);
                    }
                });
                attachNhanVienAccountButtonListeners();
            }
        });
    </script>
}