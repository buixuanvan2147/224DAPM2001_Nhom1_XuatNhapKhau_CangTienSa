@model Website_CangTienSa.Models.KVL_DangKyViewModel
@{
    ViewBag.Title = "Đăng Ký";
    Layout = "~/Views/Shared/_LayoutKhachVangLai.cshtml";
}

<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
<script src="/Scripts/jquery-3.6.0.min.js"></script>
<script>
    window.jQuery || document.write('<script src="https://code.jquery.com/jquery-3.6.0.min.js"><\/script>');
</script>
<script src="/Scripts/jquery.validate.min.js"></script>
<script>
    window.jQuery.validator || document.write('<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"><\/script>');
</script>
<script src="/Scripts/additional-methods.min.js"></script>
<script>
    window.jQuery.validator || document.write('<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/additional-methods.min.js"><\/script>');
</script>
<script src="/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    window.jQuery.validator || document.write('<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"><\/script>');
</script>

<style>
    :root {
        --primary-color: #007bff; /* Changed to a standard blue for primary action */
        --success-color: #28a745; /* Green for success messages */
        --danger-color: #dc3545;
        --secondary-color: #6c757d; /* For neutral actions like 'Back' or 'Cancel' */
        --light-gray: #f8f9fa;
        --medium-gray: #e9ecef;
        --dark-gray: #343a40;
        --input-bg: #f9fafb;
        --shadow-light: rgba(0, 0, 0, 0.08);
        --shadow-medium: rgba(0, 0, 0, 0.15);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        background-color: var(--medium-gray);
        color: var(--dark-gray);
        line-height: 1.6;
        /* Loại bỏ display: flex, justify-content, align-items, min-height từ body
           để cho phép registration-container tự căn giữa bằng margin: auto */
    }

    .registration-container {
        width: 100%;
        max-width: 900px; /* Tăng max-width để chứa 2 cột form */
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 10px 30px var(--shadow-medium);
        padding: 40px; /* Increased padding */
        box-sizing: border-box;
        margin: 40px auto; /* Thêm margin trên dưới 100px và tự động căn giữa theo chiều ngang */
    }

    .create-account-title {
        text-align: center;
        margin-bottom: 35px; /* More space below title */
        color: var(--dark-gray);
        font-size: 2.2rem; /* Larger, more prominent title */
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1px; /* Add some letter spacing */
        border-bottom: 3px solid var(--primary-color); /* Subtle underline */
        padding-bottom: 15px;
    }

    .form-group {
        margin-bottom: 20px; /* More space between form groups */
    }

        .form-group label {
            display: block;
            margin-bottom: 8px; /* More space between label and input */
            font-weight: 600; /* Slightly bolder labels */
            color: var(--dark-gray);
            font-size: 0.95rem; /* Slightly larger label font */
        }

        .form-group input[type="text"],
        .form-group input[type="password"],
        .form-group input[type="email"] {
            width: 100%;
            padding: 12px 15px; /* Increased padding for inputs */
            border: 1px solid #ced4da; /* Lighter border color */
            border-radius: 8px; /* More rounded inputs */
            font-size: 1rem; /* Standard font size for inputs */
            background-color: var(--input-bg);
            transition: all 0.3s ease; /* Smooth transition for focus effects */
        }

            .form-group input[type="text"]:focus,
            .form-group input[type="password"]:focus,
            .form-group input[type="email"]:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.25); /* Focus shadow using primary color */
                background-color: #ffffff;
            }

        .form-group .field-validation-error {
            color: var(--danger-color);
            font-size: 0.85rem; /* Slightly smaller error message font */
            margin-top: 5px;
            display: block; /* Ensure it takes full width */
        }

    .notification.success {
        background-color: #d4edda;
        color: #155724;
        padding: 15px 20px;
        border-radius: 8px;
        margin-bottom: 25px; /* More margin */
        text-align: center;
        font-size: 1rem;
        border: 1px solid #c3e6cb;
        animation: fadeIn 0.5s ease-in;
    }

    .validation-summary-errors {
        color: var(--danger-color);
        margin-bottom: 25px;
        text-align: center;
        font-size: 0.95rem;
        font-weight: 500;
        list-style-type: none; /* Remove bullet points */
        padding: 0;
    }

        .validation-summary-errors ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .validation-summary-errors li {
            margin-bottom: 5px;
        }


    .btnSubmit {
        background-color: var(--primary-color);
        border: 1px solid var(--primary-color);
        color: white;
        padding: 12px 25px; /* Larger padding for button */
        border-radius: 8px; /* More rounded button */
        cursor: pointer;
        font-size: 1.1rem; /* Larger font for button */
        font-weight: 600;
        display: flex; /* Use flexbox for button content */
        justify-content: center;
        align-items: center;
        width: 100%;
        margin-top: 30px; /* More space above button */
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
        text-decoration: none; /* Ensure no underline if it's an anchor */
    }

        .btnSubmit:hover {
            background-color: #0056b3; /* Darker blue on hover */
            transform: translateY(-5px); /* More pronounced lift */
            box-shadow: 0 12px 25px rgba(0, 123, 255, 0.4); /* Stronger shadow */
            color: white; /* Ensure text color remains white */
        }

        .btnSubmit:active {
            transform: translateY(0);
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.2);
        }

        .btnSubmit:disabled {
            background: linear-gradient(45deg, var(--secondary-color), #868e96);
            cursor: not-allowed;
            opacity: 0.8;
            transform: none;
            box-shadow: none;
            color: #ffffff;
        }

        .btnSubmit .spinner {
            display: none;
            border: 4px solid rgba(255, 255, 255, 0.7);
            border-top: 4px solid #ffffff;
            border-radius: 50%;
            width: 24px; /* Larger spinner */
            height: 24px;
            animation: spin 0.8s linear infinite;
            margin-left: 10px;
        }

        .btnSubmit.loading .spinner {
            display: inline-block;
        }

        .btnSubmit.loading span:first-child {
            visibility: hidden;
        }

    .form-actions {
        text-align: center;
        margin-top: 30px; /* More space above login link */
        font-size: 0.95rem;
    }

    .login-link a {
        color: var(--primary-color);
        text-decoration: none; /* No underline by default */
        font-weight: 500;
        transition: color 0.3s ease, text-decoration 0.3s ease;
    }

        .login-link a:hover {
            color: #0056b3;
            text-decoration: underline; /* Underline on hover */
        }

    /* CSS for two-column layout */
    .form-two-columns {
        display: flex; /* Kích hoạt Flexbox */
        flex-wrap: wrap; /* Cho phép các cột xuống dòng trên màn hình nhỏ */
        gap: 30px; /* Khoảng cách giữa các cột */
        justify-content: space-between; /* Tùy chọn: Để phân bố các cột đều ra */
    }

    .form-column {
        flex: 1; /* Mỗi cột sẽ chiếm không gian bằng nhau */
        min-width: 380px; /* Đảm bảo cột không quá nhỏ trên màn hình vừa, tăng nhẹ giá trị này nếu cần */
        /* Bạn có thể thêm border: 1px solid red; tạm thời để xem ranh giới của cột */
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-15px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 920px) { /* Điều chỉnh breakpoint nếu 900px max-width vẫn không đủ chỗ cho 2 cột 380px */
        .registration-container {
            max-width: 700px; /* Giảm max-width để form không quá rộng trên màn hình trung bình */
        }

        .form-two-columns {
            flex-direction: column; /* Chuyển thành một cột trên màn hình nhỏ/trung bình */
            gap: 0; /* Loại bỏ khoảng cách giữa các cột khi xuống dòng */
        }

        .form-column {
            min-width: unset; /* Bỏ min-width để nó co giãn theo chiều ngang của container */
        }
    }

    @@media (max-width: 768px) {
        .registration-container {
            padding: 30px;
            margin: 50px auto; /* Giảm margin trên dưới trên màn hình nhỏ hơn */
            border-radius: 10px;
        }

        .create-account-title {
            font-size: 1.8rem;
            margin-bottom: 25px;
        }

        .form-group input {
            padding: 10px 12px;
            font-size: 0.95rem;
        }

        .btnSubmit {
            padding: 10px 20px;
            font-size: 1rem;
            margin-top: 25px;
        }

        .notification.success {
            font-size: 0.9rem;
            padding: 12px 15px;
        }

        .validation-summary-errors {
            font-size: 0.9rem;
        }

        .form-actions {
            margin-top: 25px;
        }
    }

    @@media (max-width: 480px) {
        body {
            padding: 0 10px; /* Bỏ padding 20px 10px ở body, để registration-container lo margin */
        }

        .registration-container {
            padding: 20px;
            border-radius: 8px;
            margin: 30px auto; /* Giảm margin trên dưới cho màn hình siêu nhỏ */
        }

        .create-account-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            padding-bottom: 10px;
        }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                font-size: 0.9rem;
                margin-bottom: 5px;
            }

            .form-group input {
                padding: 8px 10px;
                font-size: 0.85rem;
            }

        .btnSubmit {
            padding: 8px 15px;
            font-size: 0.95rem;
            margin-top: 20px;
        }

            .btnSubmit .spinner {
                width: 20px;
                height: 20px;
            }
    }
</style>

<div class="registration-container">
    <h2 class="create-account-title">ĐĂNG KÝ TÀI KHOẢN</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="notification success">
            @TempData["SuccessMessage"]
        </div>
    }

    @Html.ValidationSummary(false, "", new { @class = "validation-summary-errors" })

    <div class="form-wrapper">
        @using (Html.BeginForm("DangKy", "Home", FormMethod.Post, new { id = "registerForm" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-two-columns">
                <div class="form-column">
                    <div class="form-group">
                        @Html.LabelFor(model => model.tenKhachHang, "Họ và Tên")
                        @Html.TextBoxFor(model => model.tenKhachHang, new { @class = "form-control", placeholder = "Nhập họ và tên", required = "required" })
                        @Html.ValidationMessageFor(model => model.tenKhachHang, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.tenDangNhap, "Tên Đăng Nhập")
                        @Html.TextBoxFor(model => model.tenDangNhap, new { @class = "form-control", placeholder = "Nhập tên đăng nhập", required = "required" })
                        @Html.ValidationMessageFor(model => model.tenDangNhap, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.matKhau, "Mật Khẩu")
                        @Html.PasswordFor(model => model.matKhau, new { @class = "form-control", placeholder = "Nhập mật khẩu", required = "required" })
                        @Html.ValidationMessageFor(model => model.matKhau, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        <label for="XacNhanMatKhau">Nhập Lại Mật Khẩu</label>
                        <input type="password" id="XacNhanMatKhau" name="XacNhanMatKhau" class="form-control" placeholder="Nhập lại mật khẩu" required="required" />
                        <span class="field-validation-error" id="XacNhanMatKhau-error"></span>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.cccd, "CCCD")
                        @Html.TextBoxFor(model => model.cccd, new { @class = "form-control", placeholder = "Nhập CCCD", required = "required", maxlength = "12", pattern = "\\d{12}" })
                        @Html.ValidationMessageFor(model => model.cccd, "", new { @class = "field-validation-error" })
                    </div>
                </div>

                <div class="form-column">
                    <div class="form-group">
                        @Html.LabelFor(model => model.sdtKhachHang, "Số Điện Thoại")
                        @Html.TextBoxFor(model => model.sdtKhachHang, new { @class = "form-control", placeholder = "Nhập số điện thoại", required = "required", pattern = "\\d{10}" })
                        @Html.ValidationMessageFor(model => model.sdtKhachHang, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.email, "Email")
                        @Html.TextBoxFor(model => model.email, new { @class = "form-control", type = "email", placeholder = "Nhập địa chỉ email", required = "required" })
                        @Html.ValidationMessageFor(model => model.email, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.diaChiLienLac, "Địa Chỉ")
                        @Html.TextBoxFor(model => model.diaChiLienLac, new { @class = "form-control", placeholder = "Nhập địa chỉ", required = "required" })
                        @Html.ValidationMessageFor(model => model.diaChiLienLac, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.tenCongTy, "Tên Công Ty (nếu có)")
                        @Html.TextBoxFor(model => model.tenCongTy, new { @class = "form-control", placeholder = "Nhập tên công ty" })
                        @Html.ValidationMessageFor(model => model.tenCongTy, "", new { @class = "field-validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.maSoThueCongTy, "Mã Số Thuế (nếu có)")
                        @Html.TextBoxFor(model => model.maSoThueCongTy, new { @class = "form-control", placeholder = "Nhập mã số thuế" })
                        @Html.ValidationMessageFor(model => model.maSoThueCongTy, "", new { @class = "field-validation-error" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <button type="submit" class="btnSubmit"><span>Gửi Yêu Cầu</span><span class="spinner"></span></button>
            </div>
        }

        <div class="form-actions">
            <p class="login-link"><a href="@Url.Action("DangNhap", "Home")">Bạn đã có tài khoản? Đăng nhập</a></p>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Parse unobtrusive validation for the form
        $.validator.unobtrusive.parse("#registerForm");

        $("#registerForm").validate({
            rules: {
                tenDangNhap: {
                    required: true,
                    minlength: 4,
                    maxlength: 50
                },
                matKhau: {
                    required: true,
                    minlength: 6,
                    maxlength: 100
                },
                XacNhanMatKhau: {
                    required: true,
                    equalTo: "#matKhau" // This should match the ID of the password field
                },
                tenKhachHang: {
                    required: true,
                    maxlength: 100
                },
                cccd: {
                    required: true,
                    digits: true,
                    minlength: 12,
                    maxlength: 12
                },
                sdtKhachHang: {
                    required: true,
                    digits: true,
                    minlength: 10,
                    maxlength: 10
                },
                email: {
                    required: true,
                    email: true,
                    maxlength: 100
                },
                diaChiLienLac: {
                    required: true,
                    maxlength: 200
                },
                tenCongTy: {
                    maxlength: 100
                },
                maSoThueCongTy: {
                    maxlength: 20
                }
            },
            messages: {
                tenDangNhap: {
                    required: "Vui lòng nhập tên đăng nhập",
                    minlength: "Tên đăng nhập phải có ít nhất 4 ký tự",
                    maxlength: "Tên đăng nhập không được vượt quá 50 ký tự"
                },
                matKhau: {
                    required: "Vui lòng nhập mật khẩu",
                    minlength: "Mật khẩu phải có ít nhất 6 ký tự",
                    maxlength: "Mật khẩu không được vượt quá 100 ký tự"
                },
                XacNhanMatKhau: {
                    required: "Vui lòng nhập lại mật khẩu",
                    equalTo: "Mật khẩu xác nhận không khớp"
                },
                tenKhachHang: {
                    required: "Vui lòng nhập họ và tên",
                    maxlength: "Họ và tên không được vượt quá 100 ký tự"
                },
                cccd: {
                    required: "Vui lòng nhập CCCD",
                    digits: "CCCD chỉ được chứa số",
                    minlength: "CCCD phải có đúng 12 số",
                    maxlength: "CCCD phải có đúng 12 số"
                },
                sdtKhachHang: {
                    required: "Vui lòng nhập số điện thoại",
                    digits: "Số điện thoại chỉ được chứa số",
                    minlength: "Số điện thoại phải có 10 số",
                    maxlength: "Số điện thoại phải có 10 số"
                },
                email: {
                    required: "Vui lòng nhập email",
                    email: "Vui lòng nhập email hợp lệ",
                    maxlength: "Email không được vượt quá 100 ký tự"
                },
                diaChiLienLac: {
                    required: "Vui lòng nhập địa chỉ",
                    maxlength: "Địa chỉ không được vượt quá 200 ký tự"
                },
                tenCongTy: {
                    maxlength: "Tên công ty không được vượt quá 100 ký tự"
                },
                maSoThueCongTy: {
                    maxlength: "Mã số thuế không được vượt quá 20 ký tự"
                },
            },
            errorPlacement: function (error, element) {
                // Place error messages correctly next to their input fields
                if (element.attr("name") == "XacNhanMatKhau") {
                    error.appendTo("#XacNhanMatKhau-error");
                } else {
                    error.insertAfter(element);
                }
            },
            submitHandler: function (form) {
                var userConfirmed = confirm("Xác nhận đăng ký tài khoản?");
                if (!userConfirmed) {
                    return false;
                }
                var $button = $(form).find('button[type="submit"]');
                $button.addClass('loading').prop('disabled', true); // Add loading class and disable
                $(form).find('input').prop('disabled', true); // Disable inputs
                form.submit();
            }
        });
    });
</script>